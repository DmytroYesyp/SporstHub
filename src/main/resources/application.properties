server.port=${PORT:5000}


#spring.datasource.url=jdbc:postgresql://ec2-44-206-197-71.compute-1.amazonaws.com:5432/dqh5qqsbbb9dr
#spring.datasource.username=kieiyxuaasrdox
#spring.datasource.password=3fae0de26e609c6b4176c168de570f00269862564d6f20319c029306ae4e8800


spring.datasource.url=jdbc:postgresql://localhost:5432/sportshubdb
spring.datasource.username=postgres
spring.datasource.password=root


spring.jpa.properties.hibernate.format_sql=true

server.error.include-message=always
security.cfg.key=keyke2y

admin.email="admin@mail.com"
admin.password="12345678"


spring.mail.host=smtp.gmail.com
spring.mail.username=sportshub.help@gmail.com
spring.mail.password=xgfzsiskbnxervyz
spring.mail.port=587
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true



# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the
# prefix is stripped before adding them to the entity manager).

# Show or not Hibernate log for each sql query
spring.jpa.show-sql=true

# Defines the style that should be used to perform batch loading
spring.jpa.properties.hibernate.batch_fetch_style=DYNAMIC

# Sets a default size for Hibernate batch fetching of associations
spring.jpa.properties.hibernate.default_batch_fetch_size=5000

# Determines the number of updates (inserts, updates and deletes)
# that are sent to the database at one time for execution.
# This parameter is necessary to do batch inserts, but must be
# coupled with the ordered inserts parameter and the JDBC driver's
# capability to rewrite the inserts into a batch insert statement
spring.jpa.properties.hibernate.jdbc.batch_size=2000

# Sets the statement's fetch size within the JDBC driver, that is
# the number of rows fetched when there is more than a one row
# result on select statements
spring.jpa.properties.hibernate.jdbc.fetch_size=10000

# Forces Hibernate to order inserts to allow for more batching
# to be used
spring.jpa.properties.hibernate.order_inserts=true

# Forces Hibernate to order SQL updates by the entity type and
# the primary key value of the items being updated. This allows
# for more batching to be used.
spring.jpa.properties.hibernate.order_updates=true

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate feature that controls the behavior in a more fine-grained way.
# Available values: none, validate, update, create, and create-drop
spring.jpa.hibernate.ddl-auto=update
